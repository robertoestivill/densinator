# The MIT License (MIT)
#
# Copyright (c) 2015 Roberto Estivill
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#!/bin/sh

# Requires ImageMagick
# brew install imagemagick

#################
### SELECT FILES
OLDIFS="$IFS"
IFS=$'\n'
FILES_PNG=`ls | grep -i .png`
FILES_JPG=`ls | grep -i .jpg`
FILES_JPEG=`ls | grep -i .jpeg`
FILES_ALL=( ${FILES_PNG[@]} ${FILES_JPG[@]} ${FILES_JPEG[@]} )

echo ""
echo "Select file [ALL]:"
for FILES_ALL_INDEX in "${!FILES_ALL[@]}"; do
    echo $((FILES_ALL_INDEX + 1 ))") ${FILES_ALL[$FILES_ALL_INDEX]}"
done
echo $(( ${#FILES_ALL[@]} + 1 ))") All"
read FILE_SELECTION

if [ -z "$FILE_SELECTION" ] || [ "$(( FILE_SELECTION - 1 ))" == "${#FILES_ALL[@]}" ] ; then
  FILES=( "${FILES_ALL[@]}" )
else
  FILES=${FILES_ALL[$(( FILE_SELECTION - 1 ))]}
fi

#################
### SCALE TYPE
echo ""
echo "Select scale type [Porcentual]:"
echo "1) Porcentual"
echo "2) Launcher icon"
echo "3) Action bar icon"
echo "4) Notification icon"
read SCALE_TYPE

case "$SCALE_TYPE" in
  2) SCALE_XXXHDPI="192x192"
     SCALE_XXHDPI="144x144"
     SCALE_XHDPI="96x96"
     SCALE_HDPI="72x72"
     SCALE_MDPI="48x48"
     SCALE_LDPI="32x32" ;;

  3) SCALE_XXXHDPI="128x128"
     SCALE_XXHDPI="96x96"
     SCALE_XHDPI="64x64"
     SCALE_HDPI="48x48"
     SCALE_MDPI="32x32"
     SCALE_LDPI="24x24" ;;

  4) SCALE_XXXHDPI="96x96"
     SCALE_XXHDPI="72x72"
     SCALE_XHDPI="48x48"
     SCALE_HDPI="36x36"
     SCALE_MDPI="24x24"
     SCALE_LDPI="18x18" ;;

  *) SCALE_XXXHDPI="100%"
     SCALE_XXHDPI="75%"
     SCALE_XHDPI="50%"
     SCALE_HDPI="37.5%"
     SCALE_MDPI="25%"
     SCALE_LDPI="18.75%" ;;
esac

#################
### GENERATE LDPI
echo ""
echo "Generate LDPI [No]:"
echo "1) No"
echo "2) Yes"
read GENERATE_LDPI

case "$GENERATE_LDPI" in
  2) GENERATE_LDPI=true ;;
  *) GENERATE_LDPI=false ;;
esac

#################
### SELECT OUTPUT DIR
echo ""
echo "Enter output dir [generated/]:"
read OUTPUT_DIR
if [ -z "$OUTPUT_DIR" ] ; then
  OUTPUT_DIR="generated"
fi

case "$SCALE_TYPE" in
  2) OUTPUT_XXXHDPI="$OUTPUT_DIR/mipmap-xxxhdpi"
     OUTPUT_XXHDPI="$OUTPUT_DIR/mipmap-xxhdpi"
     OUTPUT_XHDPI="$OUTPUT_DIR/mipmap-xhdpi"
     OUTPUT_HDPI="$OUTPUT_DIR/mipmap-hdpi"
     OUTPUT_MDPI="$OUTPUT_DIR/mipmap-mdpi"
     OUTPUT_LDPI="$OUTPUT_DIR/mipmap-ldpi" ;;

  *) OUTPUT_XXXHDPI="$OUTPUT_DIR/drawable-xxxhdpi"
     OUTPUT_XXHDPI="$OUTPUT_DIR/drawable-xxhdpi"
     OUTPUT_XHDPI="$OUTPUT_DIR/drawable-xhdpi"
     OUTPUT_HDPI="$OUTPUT_DIR/drawable-hdpi"
     OUTPUT_MDPI="$OUTPUT_DIR/drawable-mdpi"
     OUTPUT_LDPI="$OUTPUT_DIR/drawable-ldpi" ;;
esac

mkdir -p "$OUTPUT_XXXHDPI"
mkdir -p "$OUTPUT_XXHDPI"
mkdir -p "$OUTPUT_XHDPI"
mkdir -p "$OUTPUT_HDPI"
mkdir -p "$OUTPUT_MDPI"
if $GENERATE_LDPI ; then
  mkdir -p "$OUTPUT_LDPI"
fi

for FILE in ${FILES[*]}
do
    FILE_NAME=$(echo "$FILE" | tr '[:upper:]' '[:lower:]')
    FILE_NAME=${FILE_NAME// /_}

    echo "Scaling \"$FILE\" to $SCALE_XXXHDPI in $OUTPUT_XXXHDPI/$FILE_NAME"
    convert $FILE -resize $SCALE_XXXHDPI! -strip $OUTPUT_XXXHDPI/$FILE_NAME

    echo "Scaling \"$FILE\" to $SCALE_XXHDPI in $OUTPUT_XXHDPI/$FILE_NAME"
    convert $FILE -resize $SCALE_XXHDPI! -strip $OUTPUT_XXHDPI/$FILE_NAME

    echo "Scaling \"$FILE\" to $SCALE_XHDPI in $OUTPUT_XHDPI/$FILE_NAME"
    convert $FILE -resize $SCALE_XHDPI! -strip $OUTPUT_XHDPI/$FILE_NAME

    echo "Scaling \"$FILE\" to $SCALE_HDPI in $OUTPUT_HDPI/$FILE_NAME"
    convert $FILE -resize $SCALE_HDPI! -strip $OUTPUT_HDPI/$FILE_NAME

    echo "Scaling \"$FILE\" to $SCALE_MDPI in $OUTPUT_MDPI/$FILE_NAME"
    convert $FILE -resize $SCALE_MDPI! -strip $OUTPUT_MDPI/$FILE_NAME

    if $GENERATE_LDPI ; then
      echo "Scaling \"$FILE\" to $SCALE_LDPI in $OUTPUT_LDPI/$FILE_NAME"
      convert $FILE -resize $SCALE_LDPI! -strip $OUTPUT_LDPI/$FILE_NAME
    fi
    echo ""
done

echo "Done."
IFS="$OLDIFS"
open $OUTPUT_DIR
